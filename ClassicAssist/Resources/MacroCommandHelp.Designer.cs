//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClassicAssist.Resources {
    using System;
    
    
    /// <summary>
    ///   Uma classe de recurso de tipo de alta segurança, para pesquisar cadeias de caracteres localizadas etc.
    /// </summary>
    // Essa classe foi gerada automaticamente pela classe StronglyTypedResourceBuilder
    // através de uma ferramenta como ResGen ou Visual Studio.
    // Para adicionar ou remover um associado, edite o arquivo .ResX e execute ResGen novamente
    // com a opção /str, ou recrie o projeto do VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class MacroCommandHelp {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MacroCommandHelp() {
        }
        
        /// <summary>
        ///   Retorna a instância de ResourceManager armazenada em cache usada por essa classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ClassicAssist.Resources.MacroCommandHelp", typeof(MacroCommandHelp).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Substitui a propriedade CurrentUICulture do thread atual para todas as
        ///   pesquisas de recursos que usam essa classe de recurso de tipo de alta segurança.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns True if either the primary or secondary ability is set.
        /// </summary>
        public static string ACTIVEABILITY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("ACTIVEABILITY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a #optional can be &quot;primary&quot; or &quot;secondary&quot;
        ///if not ActiveAbility(optional):
        /// SetAbility(&quot;primary&quot;, &quot;on&quot;).
        /// </summary>
        public static string ACTIVEABILITY_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("ACTIVEABILITY_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if ActiveAbility():.
        /// </summary>
        public static string ACTIVEABILITY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("ACTIVEABILITY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Adds a mobile to friends list, will display target cursor if no serial/alias supplied..
        /// </summary>
        public static string ADDFRIEND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("ADDFRIEND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a AddFriend().
        /// </summary>
        public static string ADDFRIEND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("ADDFRIEND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the mobile&apos;s notoriety is Ally.
        /// </summary>
        public static string ALLY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("ALLY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Criminal(&quot;mount&quot;):.
        /// </summary>
        public static string ALLY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("ALLY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends given message to alliance chat..
        /// </summary>
        public static string ALLYMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("ALLYMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a AllyMsg(&quot;alert&quot;).
        /// </summary>
        public static string ALLYMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("ALLYMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Attack mobile (parameter can be serial or alias)..
        /// </summary>
        public static string ATTACK_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("ATTACK_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Attack(&quot;last&quot;).
        /// </summary>
        public static string ATTACK_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("ATTACK_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Setup an automated reply to the incoming dye color gump, allowing you to define dye tubs color.
        ///That command should be added prior to the action that opens the color pick gump..
        /// </summary>
        public static string AUTOCOLORPICK_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("AUTOCOLORPICK_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a AutoColorPick(666)
        ///UseObject(&apos;dyes&apos;)
        ///WaitForTarget(1000)
        ///Target(&apos;tub&apos;).
        /// </summary>
        public static string AUTOCOLORPICK_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("AUTOCOLORPICK_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a AutoColorPick(35).
        /// </summary>
        public static string AUTOCOLORPICK_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("AUTOCOLORPICK_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Applies a bandage to the player..
        /// </summary>
        public static string BANDAGESELF_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("BANDAGESELF_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a BandageSelf().
        /// </summary>
        public static string BANDAGESELF_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("BANDAGESELF_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Check for a specific buff.
        /// </summary>
        public static string BUFFEXISTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("BUFFEXISTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if BuffExists(&quot;Blood Oath&quot;):.
        /// </summary>
        public static string BUFFEXISTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("BUFFEXISTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns milliseconds remaining for given buff name, or 0 if expired/not enabled..
        /// </summary>
        public static string BUFFTIME_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("BUFFTIME_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if not BuffExists(&apos;Enemy Of One&apos;) or BuffTime(&apos;Enemy Of One&apos;) &lt; 5000:
        ///    Cast(&apos;Enemy Of One&apos;)
        ///.
        /// </summary>
        public static string BUFFTIME_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("BUFFTIME_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if BuffTime(&apos;Enemy Of One&apos;) &lt; 5000:.
        /// </summary>
        public static string BUFFTIME_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("BUFFTIME_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Cancels the current prompt..
        /// </summary>
        public static string CANCELPROMPT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CANCELPROMPT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a CancelPrompt().
        /// </summary>
        public static string CANCELPROMPT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CANCELPROMPT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Cancel an existing cursor/target..
        /// </summary>
        public static string CANCELTARGET_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CANCELTARGET_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a CancelTarget().
        /// </summary>
        public static string CANCELTARGET_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CANCELTARGET_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Cast the given named spell and automatically target given object..
        /// </summary>
        public static string CAST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CAST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Cast(&quot;Recall&quot;, &quot;runebook&quot;).
        /// </summary>
        public static string CAST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CAST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends a chat message..
        /// </summary>
        public static string CHATMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CHATMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ChatMsg(&quot;Mary had a little lamb&quot;).
        /// </summary>
        public static string CHATMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CHATMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Clear weapon ability..
        /// </summary>
        public static string CLEARABILITY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLEARABILITY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ClearAbility().
        /// </summary>
        public static string CLEARABILITY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLEARABILITY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Clear hands, &quot;left&quot;, &quot;right&quot;, or &quot;both&quot;.
        /// </summary>
        public static string CLEARHANDS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLEARHANDS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ClearHands(&quot;both&quot;).
        /// </summary>
        public static string CLEARHANDS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLEARHANDS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Clears the ignore list..
        /// </summary>
        public static string CLEARIGNORELIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLEARIGNORELIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ClearIgnoreList().
        /// </summary>
        public static string CLEARIGNORELIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLEARIGNORELIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Clear all journal texts..
        /// </summary>
        public static string CLEARJOURNAL_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLEARJOURNAL_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ClearJournal().
        /// </summary>
        public static string CLEARJOURNAL_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLEARJOURNAL_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Clear a list by name..
        /// </summary>
        public static string CLEARLIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLEARLIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ClearList(&quot;list&quot;).
        /// </summary>
        public static string CLEARLIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLEARLIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Clears the target queue when queue last target/target self is enabled..
        /// </summary>
        public static string CLEARTARGETQUEUE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLEARTARGETQUEUE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ClearTargetQueue().
        /// </summary>
        public static string CLEARTARGETQUEUE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLEARTARGETQUEUE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Clear UseOnce list..
        /// </summary>
        public static string CLEARUSEONCE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLEARUSEONCE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ClearUseOnce().
        /// </summary>
        public static string CLEARUSEONCE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLEARUSEONCE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Single click object (parameter can be serial or alias)..
        /// </summary>
        public static string CLICKOBJECT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLICKOBJECT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ClickObject(&quot;last&quot;).
        /// </summary>
        public static string CLICKOBJECT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLICKOBJECT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Close a specified gump serial.
        /// </summary>
        public static string CLOSEGUMP_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLOSEGUMP_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a CloseGump(0x454ddef).
        /// </summary>
        public static string CLOSEGUMP_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLOSEGUMP_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Closes the specified menu id.
        /// </summary>
        public static string CLOSEMENU_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CLOSEMENU_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a CloseMenu(0x1d1).
        /// </summary>
        public static string CLOSEMENU_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CLOSEMENU_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Displays an ingame prompt with the specified message, returns True if Okay was pressed, False if not..
        /// </summary>
        public static string CONFIRMPROMPT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CONFIRMPROMPT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a res = ConfirmPrompt(&quot;Play macro?&quot;)
        ///
        ///if res:
        /// PlayMacro(&quot;Macro&quot;).
        /// </summary>
        public static string CONFIRMPROMPT_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("CONFIRMPROMPT_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ConfirmPrompt(&quot;Self Destruct?&quot;).
        /// </summary>
        public static string CONFIRMPROMPT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CONFIRMPROMPT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the item count for given container..
        /// </summary>
        public static string CONTENTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CONTENTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Contents(&quot;backpack&quot;) &gt; 120:.
        /// </summary>
        public static string CONTENTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CONTENTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Request a context menu option..
        /// </summary>
        public static string CONTEXTMENU_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CONTEXTMENU_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ContextMenu(0x00aabbcc, 1).
        /// </summary>
        public static string CONTEXTMENU_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CONTEXTMENU_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the count of the given counter agent..
        /// </summary>
        public static string COUNTER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("COUNTER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Counter(&quot;bm&quot;).
        /// </summary>
        public static string COUNTER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("COUNTER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Amount comparison of item type inside a container..
        /// </summary>
        public static string COUNTTYPE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("COUNTTYPE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a CountType(0xff, &quot;backpack&quot;).
        /// </summary>
        public static string COUNTTYPE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("COUNTTYPE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Amount comparison of item or mobile type on the ground..
        /// </summary>
        public static string COUNTTYPEGROUND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("COUNTTYPEGROUND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if CountGround(0xff, 0, 10) &lt; 1:.
        /// </summary>
        public static string COUNTTYPEGROUND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("COUNTTYPEGROUND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Create list with given name, if list already exists, it is overwritten..
        /// </summary>
        public static string CREATELIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CREATELIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a CreateList(&quot;list&quot;).
        /// </summary>
        public static string CREATELIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CREATELIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Create a new named timer..
        /// </summary>
        public static string CREATETIMER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CREATETIMER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a CreateTimer(&quot;shmoo&quot;).
        /// </summary>
        public static string CREATETIMER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CREATETIMER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the mobile&apos;s notoriety is Criminal.
        /// </summary>
        public static string CRIMINAL_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("CRIMINAL_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Criminal(&quot;mount&quot;):.
        /// </summary>
        public static string CRIMINAL_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("CRIMINAL_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if given mobile is dead, false if not, if parameter is null, then returns the value from the player (parameter can be serial or alias)..
        /// </summary>
        public static string DEAD_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DEAD_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Dead(&quot;self&quot;):.
        /// </summary>
        public static string DEAD_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DEAD_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the dexterity of the player.
        /// </summary>
        public static string DEX_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DEX_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Str() &lt; 100:.
        /// </summary>
        public static string DEX_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DEX_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the given mobiles difference between max and current hits, if parameter is null, then returns the value from the player (parameter can be serial or alias)..
        /// </summary>
        public static string DIFFHITS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DIFFHITS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if DiffHits(&quot;self&quot;) &gt; 50:.
        /// </summary>
        public static string DIFFHITS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DIFFHITS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the difference between max weight and weight..
        /// </summary>
        public static string DIFFWEIGHT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DIFFWEIGHT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if DiffWeight() &gt; 50:.
        /// </summary>
        public static string DIFFWEIGHT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DIFFWEIGHT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the Direction the given alias/serial is facing.
        /// </summary>
        public static string DIRECTION_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DIRECTION_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Direction(&apos;enemy&apos;) == &apos;West&apos;:.
        /// </summary>
        public static string DIRECTION_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DIRECTION_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the Direction the entity is in relative to the player..
        /// </summary>
        public static string DIRECTIONTO_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DIRECTIONTO_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Run(DirectionTo(&quot;enemy&quot;)).
        /// </summary>
        public static string DIRECTIONTO_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DIRECTIONTO_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Display quest arrow pointer to specified coordinates.
        /// </summary>
        public static string DISPLAYQUESTPOINTER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DISPLAYQUESTPOINTER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a # add pointer
        ///DisplayQuestPointer(1000, 1000, True)
        ///Pause(2000)
        ///# remove pointer
        ///DisplayQuestPointer(1000, 1000, False).
        /// </summary>
        public static string DISPLAYQUESTPOINTER_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("DISPLAYQUESTPOINTER_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a DisplayQuestPointer(1000, 1000, True).
        /// </summary>
        public static string DISPLAYQUESTPOINTER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DISPLAYQUESTPOINTER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the distance to the given entity..
        /// </summary>
        public static string DISTANCE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DISTANCE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Distance(&quot;mount&quot;) &lt; 4:.
        /// </summary>
        public static string DISTANCE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DISTANCE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Dress all items in the specified dress agent..
        /// </summary>
        public static string DRESS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DRESS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Dress(&quot;Dress-1&quot;).
        /// </summary>
        public static string DRESS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DRESS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Adds all equipped items to a temporary list that isn&apos;t persisted on client close..
        /// </summary>
        public static string DRESSCONFIG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DRESSCONFIG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a DressConfig().
        /// </summary>
        public static string DRESSCONFIG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DRESSCONFIG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the Dress agent is currently dressing or undressing..
        /// </summary>
        public static string DRESSING_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("DRESSING_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Dressing():.
        /// </summary>
        public static string DRESSING_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("DRESSING_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Emotes the given message.
        /// </summary>
        public static string EMOTEMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("EMOTEMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a EmoteMsg(&quot;hi&quot;).
        /// </summary>
        public static string EMOTEMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("EMOTEMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the mobile&apos;s notoriety is Enemy.
        /// </summary>
        public static string ENEMY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("ENEMY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Criminal(&quot;mount&quot;):.
        /// </summary>
        public static string ENEMY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("ENEMY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Equip a specific item into a given layer. Use object inspector to determine layer value..
        /// </summary>
        public static string EQUIPITEM_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("EQUIPITEM_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a EquipItem(&quot;axe&quot;, &quot;TwoHanded&quot;).
        /// </summary>
        public static string EQUIPITEM_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("EQUIPITEM_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Send quick switch weapon packet (probably not supported on pre-AoS servers..
        /// </summary>
        public static string EQUIPLASTWEAPON_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("EQUIPLASTWEAPON_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a EquipLastWeapon().
        /// </summary>
        public static string EQUIPLASTWEAPON_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("EQUIPLASTWEAPON_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Equip a specific type into a given layer. Use object inspector to determine layer value..
        /// </summary>
        public static string EQUIPTYPE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("EQUIPTYPE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a EquipType(0xff, &quot;TwoHanded&quot;).
        /// </summary>
        public static string EQUIPTYPE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("EQUIPTYPE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Search for a wand inside your backpack and equip it.
        /// </summary>
        public static string EQUIPWAND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("EQUIPWAND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a #Equip a fireball wand if one can be found in our backpack..
        ///if FindWand(&quot;fireball&quot;, &quot;backpack&quot;, 5):
        /// #Remove current item in hand
        /// if FindLayer(&quot;OneHanded&quot;):
        ///  ClearHands(&quot;left&quot;)
        /// #Equip the wand
        /// EquipWand(&quot;fireball&quot;).
        /// </summary>
        public static string EQUIPWAND_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("EQUIPWAND_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a EquipWand(&quot;fireball&quot;, 10).
        /// </summary>
        public static string EQUIPWAND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("EQUIPWAND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Feed a given alias or serial with graphic..
        /// </summary>
        public static string FEED_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("FEED_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Feed(&quot;mount&quot;, 0xff).
        /// </summary>
        public static string FEED_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("FEED_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if alias serial can be found on screen, false if not..
        /// </summary>
        public static string FINDALIAS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("FINDALIAS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if FindAlias(&quot;mount&quot;):.
        /// </summary>
        public static string FINDALIAS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("FINDALIAS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true and updates found alias if an item exists in the specified layer, option serial/alias for mobile to check..
        /// </summary>
        public static string FINDLAYER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("FINDLAYER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if FindLayer(&quot;OneHanded&quot;):.
        /// </summary>
        public static string FINDLAYER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("FINDLAYER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Searches for entity by serial and sets found alias, defaults to ground if no source given..
        /// </summary>
        public static string FINDOBJECT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("FINDOBJECT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a # Find on ground
        ///FindObject(&quot;mount&quot;)
        ///
        ///# Find on ground with range
        ///FindObject(&quot;mount&quot;, 10)
        ///
        ///# Find in container, must specify search level or -1
        ///FindObject(&quot;weapon&quot;, -1, &quot;backpack&quot;)  .
        /// </summary>
        public static string FINDOBJECT_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("FINDOBJECT_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a FindObject(&quot;mount&quot;).
        /// </summary>
        public static string FINDOBJECT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("FINDOBJECT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Searches for entity by graphic ID and sets found alias, defaults to ground if no source given..
        /// </summary>
        public static string FINDTYPE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("FINDTYPE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a # Look for a food item from a list and eat 1 if found.
        ///if not ListExists(&quot;food&quot;): 
        /// CreateList(&quot;food&quot;) 
        /// PushList(&quot;food&quot;, 0x9b7) #bird 
        /// PushList(&quot;food&quot;, 0x9d3) #ham 
        /// PushList(&quot;food&quot;, 0x97d) #cheese 
        /// PushList(&quot;food&quot;, 0x9d0) #apple 
        /// PushList(&quot;food&quot;, 0x9eb) #muffin 
        /// PushList(&quot;food&quot;, 0x97b) #fishsteak 
        /// PushList(&quot;food&quot;, 0x9c0) #sausage 
        /// PushList(&quot;food&quot;, 0x9f2) #ribs 
        /// PushList(&quot;food&quot;, 0x9d1) #grapes 
        /// PushList(&quot;food&quot;, 0x9d2) #peach 
        ///
        ///for i in GetList(&quot;food&quot;): 
        /// if FindType(i, -1, &quot;backpack&quot; [o restante da cadeia de caracteres foi truncado]&quot;;.
        /// </summary>
        public static string FINDTYPE_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("FINDTYPE_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a FindType(0xff).
        /// </summary>
        public static string FINDTYPE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("FINDTYPE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Search for a wand and set alias &quot;found&quot;..
        /// </summary>
        public static string FINDWAND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("FINDWAND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a FindWand(&quot;fireball&quot;, &quot;backpack&quot;, 10).
        /// </summary>
        public static string FINDWAND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("FINDWAND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a (Garoyle) Start flying if not already flying..
        /// </summary>
        public static string FLY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("FLY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Fly().
        /// </summary>
        public static string FLY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("FLY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if mobile is currently flying..
        /// </summary>
        public static string FLYING_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("FLYING_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Flying(&quot;self&quot;):.
        /// </summary>
        public static string FLYING_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("FLYING_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the number of current followers as per status bar data..
        /// </summary>
        public static string FOLLOWERS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("FOLLOWERS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Followers() &lt; 1:.
        /// </summary>
        public static string FOLLOWERS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("FOLLOWERS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Gets the value of the given alias name..
        /// </summary>
        public static string GETALIAS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GETALIAS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a GetAlias(&quot;mount&quot;).
        /// </summary>
        public static string GETALIAS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GETALIAS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Get mobile and set enemy alias..
        /// </summary>
        public static string GETENEMY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GETENEMY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a #get murderer
        ///GetEnemy([&apos;Murderer&apos;])
        ///#get closest murderer, any body type
        ///GetEnemy([&apos;Murderer&apos;], &apos;Any&apos;, &apos;Closest&apos;)
        ///#get next any notoriety, humanoid or transformation - unmounted
        ///GetEnemy([&apos;Any&apos;], &apos;Both&apos;, &apos;Next&apos;, &apos;Unmounted&apos;).
        /// </summary>
        public static string GETENEMY_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("GETENEMY_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a GetEnemy([&quot;Murderer&quot;]).
        /// </summary>
        public static string GETENEMY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GETENEMY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Get mobile and set friend alias..
        /// </summary>
        public static string GETFRIEND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GETFRIEND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a GetFriend([&quot;Murderer&quot;]).
        /// </summary>
        public static string GETFRIEND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GETFRIEND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Get friend that only exists in the friends list, parameter distance &apos;Closest&apos;/&apos;Nearest&apos;/&apos;Next&apos;.
        /// </summary>
        public static string GETFRIENDLISTONLY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GETFRIENDLISTONLY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a GetFriendListOnly(&quot;Closest&quot;).
        /// </summary>
        public static string GETFRIENDLISTONLY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GETFRIENDLISTONLY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns array of all entries in the list, for use with for loop etc..
        /// </summary>
        public static string GETLIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GETLIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a GetList(&quot;list&quot;).
        /// </summary>
        public static string GETLIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GETLIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends an internal prompt request and returns the text entered.
        /// </summary>
        public static string GETTEXT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GETTEXT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a res, name = GetText(&quot;Name?&quot;, 10000)
        ///
        ///if res:
        /// Rename(0xc1b, name).
        /// </summary>
        public static string GETTEXT_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("GETTEXT_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a res, msg = GetText(&quot;Enter message...&quot;, 30000).
        /// </summary>
        public static string GETTEXT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GETTEXT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the gold value as per status bar data..
        /// </summary>
        public static string GOLD_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GOLD_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Gold() &lt; 2000:.
        /// </summary>
        public static string GOLD_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GOLD_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns Item ID of given object (parameter can be serial or alias)..
        /// </summary>
        public static string GRAPHIC_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GRAPHIC_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Graphic(&quot;mount&quot;).
        /// </summary>
        public static string GRAPHIC_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GRAPHIC_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the mobile&apos;s notoriety is Attackable.
        /// </summary>
        public static string GRAY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GRAY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Criminal(&quot;mount&quot;):.
        /// </summary>
        public static string GRAY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GRAY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends given message to guild chat..
        /// </summary>
        public static string GUILDMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GUILDMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a GuildMsg(&quot;alert&quot;).
        /// </summary>
        public static string GUILDMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GUILDMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Checks if a gump id exists or not..
        /// </summary>
        public static string GUMPEXISTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("GUMPEXISTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if GumpExists(0xff):.
        /// </summary>
        public static string GUMPEXISTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("GUMPEXISTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Displays overhead message above given mobile / item..
        /// </summary>
        public static string HEADMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("HEADMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a HeadMsg(&quot;hi&quot;, &quot;backpack&quot;).
        /// </summary>
        public static string HEADMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("HEADMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if given mobile is hidden, false if not, if parameter is null, then returns the value from the player (parameter can be serial or alias)..
        /// </summary>
        public static string HIDDEN_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("HIDDEN_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Hidden(&quot;self&quot;):.
        /// </summary>
        public static string HIDDEN_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("HIDDEN_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Remove an item/mobile from the screen.
        /// </summary>
        public static string HIDEENTITY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("HIDEENTITY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ClearIgnoreList()
        ///# Hide all corpses on screen
        ///while FindType(0x2006):
        /// HideEntity(&apos;found&apos;)
        /// IgnoreObject(&apos;found&apos;).
        /// </summary>
        public static string HIDEENTITY_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("HIDEENTITY_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a HideEntity(&apos;corpse&apos;).
        /// </summary>
        public static string HIDEENTITY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("HIDEENTITY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the given mobiles hitpoints, if parameter is null, then returns the value from the player (parameter can be serial or alias)..
        /// </summary>
        public static string HITS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("HITS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a hits = Hits(&quot;self&quot;).
        /// </summary>
        public static string HITS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("HITS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Enable and disable hotkeys..
        /// </summary>
        public static string HOTKEYS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("HOTKEYS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Hotkeys().
        /// </summary>
        public static string HOTKEYS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("HOTKEYS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns Hue of given object (parameter can be serial or alias)..
        /// </summary>
        public static string HUE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("HUE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Hue(&quot;mount&quot;) == 0:.
        /// </summary>
        public static string HUE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("HUE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Ignores the given object from find commands.
        /// </summary>
        public static string IGNOREOBJECT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("IGNOREOBJECT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a IgnoreObject(&quot;self&quot;).
        /// </summary>
        public static string IGNOREOBJECT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("IGNOREOBJECT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Show object inspector for supplied serial / alias, will prompt for target if no parameter given..
        /// </summary>
        public static string INFO_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INFO_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Info(&quot;self&quot;).
        /// </summary>
        public static string INFO_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INFO_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if supplied mobile exists in the friends list..
        /// </summary>
        public static string INFRIENDLIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INFRIENDLIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if InFriendList(&quot;last&quot;):.
        /// </summary>
        public static string INFRIENDLIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INFRIENDLIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Check for a text in gump..
        /// </summary>
        public static string INGUMP_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INGUMP_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if InGump(0xf00f, &quot;lethal darts&quot;):.
        /// </summary>
        public static string INGUMP_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INGUMP_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Check whether the given serial / alias exists in the ignore list..
        /// </summary>
        public static string INIGNORELIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INIGNORELIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if InIgnoreList(&quot;mount&quot;):.
        /// </summary>
        public static string INIGNORELIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INIGNORELIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Check for a text in journal, optional source name..
        /// </summary>
        public static string INJOURNAL_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INJOURNAL_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if InJournal(&quot;town guards&quot;, &quot;system&quot;):.
        /// </summary>
        public static string INJOURNAL_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INJOURNAL_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Checks whether a list contains a given element..
        /// </summary>
        public static string INLIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INLIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if InList(&quot;shmoo&quot;, 1):.
        /// </summary>
        public static string INLIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INLIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns True if the menu title or entry titles contains the given text..
        /// </summary>
        public static string INMENU_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INMENU_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a UseSkill(&apos;Tracking&apos;)
        ///WaitForMenu(0x1d0, 5000)
        ///ReplyMenu(0x1d0, 3, 0x2106, 0)
        ///WaitForMenu(0x1d1, 5000)
        ///if InMenu(0x1d1, &apos;Omar&apos;):
        /// HeadMsg(&apos;Omar is in range&apos;, &apos;self&apos;)
        ///CloseMenu(0x1d1).
        /// </summary>
        public static string INMENU_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("INMENU_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if InMenu(0x1d1, &apos;Omar&apos;):.
        /// </summary>
        public static string INMENU_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INMENU_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the mobile&apos;s notoriety is Innocent.
        /// </summary>
        public static string INNOCENT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INNOCENT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Criminal(&quot;mount&quot;):.
        /// </summary>
        public static string INNOCENT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INNOCENT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Return the true if the given serial/alias is in party with you..
        /// </summary>
        public static string INPARTY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INPARTY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if InParty(&quot;friend&quot;):.
        /// </summary>
        public static string INPARTY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INPARTY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Check for range between your character and another mobile or an item.
        /// </summary>
        public static string INRANGE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INRANGE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if InRange(&quot;enemy&quot;, 10):.
        /// </summary>
        public static string INRANGE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INRANGE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the region of the target has the specified attribute..
        /// </summary>
        public static string INREGION_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INREGION_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if InRegion(&quot;Guarded&quot;, &quot;self&quot;).
        /// </summary>
        public static string INREGION_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INREGION_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the intelligence of the player.
        /// </summary>
        public static string INT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Str() &lt; 100:.
        /// </summary>
        public static string INT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Attempts to interrupt spell by lifting an item briefly..
        /// </summary>
        public static string INTERRUPTSPELL_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INTERRUPTSPELL_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a InterruptSpell().
        /// </summary>
        public static string INTERRUPTSPELL_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INTERRUPTSPELL_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Use a virtue by name..
        /// </summary>
        public static string INVOKEVIRTUE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INVOKEVIRTUE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a InvokeVirtue(&quot;Honor&quot;).
        /// </summary>
        public static string INVOKEVIRTUE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INVOKEVIRTUE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the mobile&apos;s notoriety is Invulnerable.
        /// </summary>
        public static string INVULNERABLE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("INVULNERABLE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Criminal(&quot;mount&quot;):.
        /// </summary>
        public static string INVULNERABLE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("INVULNERABLE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a (Garoyle) Stop flying if currently flying..
        /// </summary>
        public static string LAND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("LAND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Land().
        /// </summary>
        public static string LAND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("LAND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the number of entries in the list..
        /// </summary>
        public static string LIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("LIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if List(&quot;list&quot;) &lt; 5:.
        /// </summary>
        public static string LIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("LIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if list exist, or false if not..
        /// </summary>
        public static string LISTEXISTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("LISTEXISTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if ListExists(&quot;list&quot;):.
        /// </summary>
        public static string LISTEXISTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("LISTEXISTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the luck value as per status bar data..
        /// </summary>
        public static string LUCK_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("LUCK_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Luck() &lt; 800:.
        /// </summary>
        public static string LUCK_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("LUCK_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the given mobiles mana, if parameter is null, then returns the value from the player (parameter can be serial or alias)..
        /// </summary>
        public static string MANA_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MANA_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Mana(&quot;self&quot;) &lt; 25:.
        /// </summary>
        public static string MANA_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MANA_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the number of max followers as per status bar data..
        /// </summary>
        public static string MAXFOLLOWERS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MAXFOLLOWERS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Followers() == MaxFollowers():.
        /// </summary>
        public static string MAXFOLLOWERS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MAXFOLLOWERS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the given mobiles max hitpoints, if parameter is null, then returns the value from the player (parameter can be serial or alias)..
        /// </summary>
        public static string MAXHITS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MAXHITS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a hits = MaxHits(&quot;self&quot;).
        /// </summary>
        public static string MAXHITS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MAXHITS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the given mobiles max mana, if parameter is null, then returns the value from the player (parameter can be serial or alias)..
        /// </summary>
        public static string MAXMANA_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MAXMANA_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a mana = MaxMana(&quot;self&quot;).
        /// </summary>
        public static string MAXMANA_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MAXMANA_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the given mobiles max stamina, if parameter is null, then returns the value from the player (parameter can be serial or alias)..
        /// </summary>
        public static string MAXSTAM_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MAXSTAM_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a stam = MaxStam(&quot;self&quot;).
        /// </summary>
        public static string MAXSTAM_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MAXSTAM_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the max weight as per status bar data..
        /// </summary>
        public static string MAXWEIGHT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MAXWEIGHT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if MaxWeight() &lt; 300:.
        /// </summary>
        public static string MAXWEIGHT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MAXWEIGHT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Return true if the given menu id exists..
        /// </summary>
        public static string MENUEXISTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MENUEXISTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if MenuExists(0x1d1):.
        /// </summary>
        public static string MENUEXISTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MENUEXISTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Show a simple message box with a custom title and body..
        /// </summary>
        public static string MESSAGEBOX_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MESSAGEBOX_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a MessageBox(&quot;title&quot;, &quot;message&quot;).
        /// </summary>
        public static string MESSAGEBOX_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MESSAGEBOX_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Displays an ingame gump prompting for a message.
        /// </summary>
        public static string MESSAGEPROMPT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MESSAGEPROMPT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a res, name = MessagePrompt(&quot;Enter Name?&quot;, &quot;Whiskers&quot;)
        ///
        ///if res:
        /// Rename(0xc1b, name).
        /// </summary>
        public static string MESSAGEPROMPT_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("MESSAGEPROMPT_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a res, msg = MessagePrompt(&quot;Message&quot;, &quot;Initial Text&quot;).
        /// </summary>
        public static string MESSAGEPROMPT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MESSAGEPROMPT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the specified mobile is mounted..
        /// </summary>
        public static string MOUNTED_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MOUNTED_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Mounted(&quot;self&quot;):.
        /// </summary>
        public static string MOUNTED_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MOUNTED_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Move item to container (parameters can be serials or aliases)..
        /// </summary>
        public static string MOVEITEM_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MOVEITEM_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a MoveItem(&quot;source&quot;, &quot;destination&quot;).
        /// </summary>
        public static string MOVEITEM_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MOVEITEM_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Move the given serial/alias to the specified x,y,z offset of the player, no amount specified or -1 will move the full stack..
        /// </summary>
        public static string MOVEITEMOFFSET_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MOVEITEMOFFSET_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a MoveItemOffset(&quot;trashitem&quot;, 0, 1, 0, -1).
        /// </summary>
        public static string MOVEITEMOFFSET_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MOVEITEMOFFSET_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Move a type from source to destintion..
        /// </summary>
        public static string MOVETYPE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MOVETYPE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a #To move a type to another container...
        ///
        ///MoveType(0x170f, &quot;backpack&quot;, &quot;bank&quot;)
        ///
        ///#Destination can be the ground by specifying destination container to -1 and specifying the coordinates...
        ///
        ///MoveType(0x170f, &quot;backpack&quot;, -1, 1928, 2526, 0)
        ///
        ///#Optional parameters exist for Hue and Amount, to move 10 maximum with the a Hue of 50...
        ///MoveType(0x170f, &quot;backpack&quot;, &quot;bank&quot;, -1, -1, 0, 50, 10).
        /// </summary>
        public static string MOVETYPE_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("MOVETYPE_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a MoveType(0xff, &quot;backpack&quot;, &quot;bank&quot;).
        /// </summary>
        public static string MOVETYPE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MOVETYPE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Move the given type from the specified source container to the specified x,y,z offset of the player, no amount specified or -1 will move the full stack..
        /// </summary>
        public static string MOVETYPEOFFSET_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MOVETYPEOFFSET_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a MoveTypeOffset(0xf0e, &quot;backpack&quot;, 0, 1, 0, -1).
        /// </summary>
        public static string MOVETYPEOFFSET_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MOVETYPEOFFSET_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Speaks the given message, Optional hue.
        /// </summary>
        public static string MSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Msg(&quot;hi&quot;).
        /// </summary>
        public static string MSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the mobile&apos;s notoriety is Murderer.
        /// </summary>
        public static string MURDERER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("MURDERER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Criminal(&quot;mount&quot;):.
        /// </summary>
        public static string MURDERER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("MURDERER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Return the name of the given mobile..
        /// </summary>
        public static string NAME_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("NAME_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Name(&quot;self&quot;) == &quot;Shmoo&quot;:.
        /// </summary>
        public static string NAME_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("NAME_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Opens the Guild gump.
        /// </summary>
        public static string OPENGUILDGUMP_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("OPENGUILDGUMP_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a OpenGuildGump().
        /// </summary>
        public static string OPENGUILDGUMP_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("OPENGUILDGUMP_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Opens the Quests gump.
        /// </summary>
        public static string OPENQUESTSGUMP_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("OPENQUESTSGUMP_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a OpenQuestsGump().
        /// </summary>
        public static string OPENQUESTSGUMP_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("OPENQUESTSGUMP_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Opens the Virtue gump of the given serial/alias (defaults to current player).
        /// </summary>
        public static string OPENVIRTUEGUMP_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("OPENVIRTUEGUMP_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a OpenVirtueGump(&quot;enemy&quot;).
        /// </summary>
        public static string OPENVIRTUEGUMP_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("OPENVIRTUEGUMP_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Executes the named Organizer agent..
        /// </summary>
        public static string ORGANIZER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("ORGANIZER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Organizer(&quot;Organizer-1&quot;).
        /// </summary>
        public static string ORGANIZER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("ORGANIZER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if currently running an organizer agent, or false if not..
        /// </summary>
        public static string ORGANIZING_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("ORGANIZING_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Organizing():.
        /// </summary>
        public static string ORGANIZING_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("ORGANIZING_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the specified mobile is frozen..
        /// </summary>
        public static string PARALYZED_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PARALYZED_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Paralyzed(&quot;self&quot;):.
        /// </summary>
        public static string PARALYZED_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PARALYZED_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends given message to party chat..
        /// </summary>
        public static string PARTYMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PARTYMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a PartyMsg(&quot;alert&quot;).
        /// </summary>
        public static string PARTYMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PARTYMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Requests client to pathfind to given coordinates / entity.
        /// </summary>
        public static string PATHFIND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PATHFIND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a #Pathfind to coordinates
        ///Pathfind(1438, 1630, 20)
        ///
        ///#Pathfind to entity
        ///SetEnemy(0x3c9)
        ///Pathfind(&apos;enemy&apos;).
        /// </summary>
        public static string PATHFIND_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("PATHFIND_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Pathfind(1000, 1000, 0).
        /// </summary>
        public static string PATHFIND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PATHFIND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Pauses execution for the given amount in milliseconds..
        /// </summary>
        public static string PAUSE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PAUSE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Pause(1000).
        /// </summary>
        public static string PAUSE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PAUSE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Retrieve an approximated ping with server. -1 on failure..
        /// </summary>
        public static string PING_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PING_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Ping().
        /// </summary>
        public static string PING_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PING_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if there is a macro, use in background macros..
        /// </summary>
        public static string PLAYING_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PLAYING_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Playing():.
        /// </summary>
        public static string PLAYING_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PLAYING_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Plays the given macro name..
        /// </summary>
        public static string PLAYMACRO_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PLAYMACRO_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a PlayMacro(&quot;beep&quot;).
        /// </summary>
        public static string PLAYMACRO_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PLAYMACRO_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Play sound by id or system .wav file..
        /// </summary>
        public static string PLAYSOUND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PLAYSOUND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a PlaySound(&quot;Bike Horn.wav&quot;).
        /// </summary>
        public static string PLAYSOUND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PLAYSOUND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the specified mobile is poisoned..
        /// </summary>
        public static string POISONED_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("POISONED_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Poisoned(&quot;self&quot;):.
        /// </summary>
        public static string POISONED_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("POISONED_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Remove elements from a list, returns the number of elements removed.
        /// </summary>
        public static string POPLIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("POPLIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a CreateList(&quot;hippies&quot;)
        ///PushList(&quot;hippies&quot;, 1)
        ///PushList(&quot;hippies&quot;, 2)
        ///PushList(&quot;hippies&quot;, 3)
        ///
        ///PopList(&quot;hippies&quot;, &quot;front&quot;) # Removes 1
        ///PopList(&quot;hippies&quot;, &quot;back&quot;) # Removes 3
        ///PopList(&quot;hippies&quot;, &quot;2&quot;) # Removes any 2&apos;s that exist in the list
        ///
        ///
        ///for x in GetList(&quot;hippies&quot;):
        /// print x # Never reached because list is empty
        ///.
        /// </summary>
        public static string POPLIST_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("POPLIST_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a PopList(&quot;list&quot;).
        /// </summary>
        public static string POPLIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("POPLIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Prompt with an in-game target cursor to supply value for given alias name..
        /// </summary>
        public static string PROMPTALIAS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PROMPTALIAS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a PromptAlias(&quot;mount&quot;).
        /// </summary>
        public static string PROMPTALIAS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PROMPTALIAS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends the specified message as a prompt response.
        /// </summary>
        public static string PROMPTMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PROMPTMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a PromptMsg(&quot;hello&quot;).
        /// </summary>
        public static string PROMPTMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PROMPTMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the given text appears in the items item properties..
        /// </summary>
        public static string PROPERTY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PROPERTY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Property(&quot;item&quot;, &quot;Defense Chance Increase&quot;):.
        /// </summary>
        public static string PROPERTY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PROPERTY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the argument value of the given property name. Optional argument index..
        /// </summary>
        public static string PROPERTYVALUE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PROPERTYVALUE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a val = PropertyValue[int](&quot;backpack&quot;, &quot;Contents&quot;).
        /// </summary>
        public static string PROPERTYVALUE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PROPERTYVALUE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Pushes a value to the end of the list, will create list if it doesn&apos;t exist..
        /// </summary>
        public static string PUSHLIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("PUSHLIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a PushList(&quot;list&quot;, 1).
        /// </summary>
        public static string PUSHLIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("PUSHLIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Rehue an item/mobile the specified hue value, set to 0 to remove. (Experimental).
        /// </summary>
        public static string REHUE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("REHUE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Rehue(&quot;mount&quot;, 1176).
        /// </summary>
        public static string REHUE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("REHUE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Removes a mobile from the friends list, will display target cursor if no serial/alias supplied..
        /// </summary>
        public static string REMOVEFRIEND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("REMOVEFRIEND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a RemoveFriend().
        /// </summary>
        public static string REMOVEFRIEND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("REMOVEFRIEND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Removes the list with the given name..
        /// </summary>
        public static string REMOVELIST_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("REMOVELIST_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a RemoveList(&quot;list&quot;).
        /// </summary>
        public static string REMOVELIST_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("REMOVELIST_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Removes the named timer..
        /// </summary>
        public static string REMOVETIMER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("REMOVETIMER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a RemoveTimer(&quot;shmoo&quot;).
        /// </summary>
        public static string REMOVETIMER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("REMOVETIMER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends rename request..
        /// </summary>
        public static string RENAME_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("RENAME_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Rename(&quot;mount&quot;, &quot;Snoopy&quot;).
        /// </summary>
        public static string RENAME_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("RENAME_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Replay the current macro.
        /// </summary>
        public static string REPLAY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("REPLAY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Replay().
        /// </summary>
        public static string REPLAY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("REPLAY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends a button reply to server gump, parameters are gumpID and buttonID..
        /// </summary>
        public static string REPLYGUMP_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("REPLYGUMP_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ReplyGump(0xff, 0).
        /// </summary>
        public static string REPLYGUMP_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("REPLYGUMP_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends a button reply to server menu.
        /// </summary>
        public static string REPLYMENU_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("REPLYMENU_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ReplyMenu(0x1d0, 3, 0x2106, 0).
        /// </summary>
        public static string REPLYMENU_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("REPLYMENU_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends Resync request to server..
        /// </summary>
        public static string RESYNC_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("RESYNC_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Resync().
        /// </summary>
        public static string RESYNC_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("RESYNC_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Run in the given direction..
        /// </summary>
        public static string RUN_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("RUN_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Run(&quot;east&quot;).
        /// </summary>
        public static string RUN_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("RUN_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Produces an in-game gump to choose from a list of options
        ///
        ///Returns a tuple with a boolean signifying whether the OK button was pressed, and the index of the entry selected.
        /// </summary>
        public static string SELECTIONPROMPT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SELECTIONPROMPT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a res, index = SelectionPrompt([&apos;Sex&apos;, &apos;Drugs&apos;, &apos;Rock and Roll&apos;])
        ///
        ///if res:
        /// print &apos;Option {} was selected&apos;.format(index)
        ///else:
        /// print &apos;Cancel was pressed&apos;.
        /// </summary>
        public static string SELECTIONPROMPT_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("SELECTIONPROMPT_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SelectionPrompt([&apos;Option 1&apos;, &apos;Option 2&apos;]).
        /// </summary>
        public static string SELECTIONPROMPT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SELECTIONPROMPT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Set weapon ability, parameter &quot;primary&quot; / &quot;secondary&quot;..
        /// </summary>
        public static string SETABILITY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETABILITY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetAbility(&quot;primary&quot;).
        /// </summary>
        public static string SETABILITY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETABILITY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sets the value of the given alias name..
        /// </summary>
        public static string SETALIAS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETALIAS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetAlias(&quot;mount&quot;, 0x40000001).
        /// </summary>
        public static string SETALIAS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETALIAS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sets the container for the Autoloot agent to put items into....
        /// </summary>
        public static string SETAUTOLOOTCONTAINER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETAUTOLOOTCONTAINER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetAutolootContainer(&quot;backpack&quot;).
        /// </summary>
        public static string SETAUTOLOOTCONTAINER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETAUTOLOOTCONTAINER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sets the enemy to the given serial/alias..
        /// </summary>
        public static string SETENEMY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETENEMY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetEnemy(&quot;mount&quot;).
        /// </summary>
        public static string SETENEMY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETENEMY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Set force walk, True or False.
        /// </summary>
        public static string SETFORCEWALK_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETFORCEWALK_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetForceWalk(True).
        /// </summary>
        public static string SETFORCEWALK_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETFORCEWALK_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sets the friend to the given serial/alias..
        /// </summary>
        public static string SETFRIEND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETFRIEND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetFriend(&quot;mount&quot;).
        /// </summary>
        public static string SETFRIEND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETFRIEND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sets the last target to the given serial/alias..
        /// </summary>
        public static string SETLASTTARGET_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETLASTTARGET_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetLastTarget(&quot;mount&quot;).
        /// </summary>
        public static string SETLASTTARGET_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETLASTTARGET_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sets the value of the given alias name, alias is valid only in the current macro..
        /// </summary>
        public static string SETMACROALIAS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETMACROALIAS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetMacroAlias(&quot;mount&quot;, 0x40000001).
        /// </summary>
        public static string SETMACROALIAS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETMACROALIAS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Set the source and destination for the specified Organizer name.
        /// </summary>
        public static string SETORGANIZERCONTAINERS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETORGANIZERCONTAINERS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetOrganizerContainers(&quot;Organizer-1&quot;, &quot;backpack&quot;, &quot;bank&quot;).
        /// </summary>
        public static string SETORGANIZERCONTAINERS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETORGANIZERCONTAINERS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Set quiet mode True/False, True reduces the number of messages macro commands emit..
        /// </summary>
        public static string SETQUIETMODE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETQUIETMODE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetQuietMode(True).
        /// </summary>
        public static string SETQUIETMODE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETQUIETMODE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sets the lock state of the given skill, up, down or locked..
        /// </summary>
        public static string SETSKILL_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETSKILL_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetSkill(&quot;hiding&quot;, &quot;locked&quot;).
        /// </summary>
        public static string SETSKILL_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETSKILL_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sets the lock state of the given stat, up, down or locked..
        /// </summary>
        public static string SETSTATUS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETSTATUS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetStatus(&apos;str&apos;, &apos;locked&apos;).
        /// </summary>
        public static string SETSTATUS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETSTATUS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Set a timer value and create in case it does not exist..
        /// </summary>
        public static string SETTIMER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETTIMER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetTimer(&quot;shmoo&quot;, 0).
        /// </summary>
        public static string SETTIMER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETTIMER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Enables or disables autobuying of the specified vendor buy list name....
        /// </summary>
        public static string SETVENDORBUYAUTOBUY_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SETVENDORBUYAUTOBUY_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a # set on
        ///SetVendorBuyAutoBuy(&quot;regs&quot;, &quot;on&quot;)
        ///# set off
        ///SetVendorBuyAutoBuy(&quot;regs&quot;, &quot;off&quot;)
        ///# default will toggle
        ///SetVendorBuyAutoBuy(&quot;regs&quot;).
        /// </summary>
        public static string SETVENDORBUYAUTOBUY_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("SETVENDORBUYAUTOBUY_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SetVendorBuyAutoBuy(&quot;regs&quot;, &quot;on&quot;).
        /// </summary>
        public static string SETVENDORBUYAUTOBUY_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SETVENDORBUYAUTOBUY_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Display corpses and/or mobiles names (parameter &quot;mobiles&quot; or &quot;corpses&quot;..
        /// </summary>
        public static string SHOWNAMES_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SHOWNAMES_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ShowNames(&quot;corpses&quot;).
        /// </summary>
        public static string SHOWNAMES_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SHOWNAMES_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the base value of the given skill name..
        /// </summary>
        public static string SKILL_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SKILL_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Skill(&quot;hiding&quot;) &lt; 100:.
        /// </summary>
        public static string SKILL_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SKILL_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the skill cap for the specified skill.
        /// </summary>
        public static string SKILLCAP_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SKILLCAP_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if SkillCap(&quot;Blacksmithy&quot;) == 120:.
        /// </summary>
        public static string SKILLCAP_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SKILLCAP_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the lock status of the given skill, up, down, or locked..
        /// </summary>
        public static string SKILLSTATE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SKILLSTATE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if SkillState(&quot;hiding&apos;) == &quot;locked&quot;:.
        /// </summary>
        public static string SKILLSTATE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SKILLSTATE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Take a screenshot of the window.
        /// </summary>
        public static string SNAPSHOT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SNAPSHOT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a # Just the game client area, no delay, default filename
        ///Snapshot()
        ///
        ///# Fullscreen snapshot, 3 second delay, default filename
        ///Snapshot(3000, True)
        ///
        ///# Client area snapshot, no delay, custom filename
        ///Snapshot(0, False, &quot;screenshot.png&quot;).
        /// </summary>
        public static string SNAPSHOT_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("SNAPSHOT_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Snapshot().
        /// </summary>
        public static string SNAPSHOT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SNAPSHOT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Check for a specific special move.
        /// </summary>
        public static string SPECIALMOVEEXISTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SPECIALMOVEEXISTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if SpecialMoveExists(&quot;Death Strike&quot;):.
        /// </summary>
        public static string SPECIALMOVEEXISTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SPECIALMOVEEXISTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the given mobiles stamina, if parameter is null, then returns the value from the player (parameter can be serial or alias)..
        /// </summary>
        public static string STAM_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("STAM_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Stam(&quot;self&quot;) &lt; 25:.
        /// </summary>
        public static string STAM_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("STAM_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Stops the current macro..
        /// </summary>
        public static string STOP_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("STOP_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a # Stop the current macro
        ///Stop()
        ///# Stop a macro by name
        ///Stop(&quot;Background Macro&quot;).
        /// </summary>
        public static string STOP_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("STOP_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Stop().
        /// </summary>
        public static string STOP_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("STOP_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Stops all running macros including background macros..
        /// </summary>
        public static string STOPALL_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("STOPALL_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a StopAll().
        /// </summary>
        public static string STOPALL_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("STOPALL_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the strength of the player.
        /// </summary>
        public static string STR_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("STR_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Str() &lt; 100:.
        /// </summary>
        public static string STR_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("STR_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Send a text message..
        /// </summary>
        public static string SYSMESSAGE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("SYSMESSAGE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a # default hue
        ///SysMessage(&quot;Hello&quot;)
        ///# specifying hue
        ///SysMessage(&quot;Hello&quot;, 35).
        /// </summary>
        public static string SYSMESSAGE_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("SYSMESSAGE_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a SysMessage(&quot;hello&quot;).
        /// </summary>
        public static string SYSMESSAGE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("SYSMESSAGE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Targets the given object (parameter can be serial or alias)..
        /// </summary>
        public static string TARGET_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TARGET_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Target(&quot;self&quot;).
        /// </summary>
        public static string TARGET_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TARGET_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Uses tool and targets specified resource type (Requires server support (OSI / ServUO)).
        /// </summary>
        public static string TARGETBYRESOURCE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TARGETBYRESOURCE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a TargetByResource(&apos;pickaxe&apos;, &apos;Ore&apos;).
        /// </summary>
        public static string TARGETBYRESOURCE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TARGETBYRESOURCE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if a target cursor is displayed and the notoriety matches the supplied value, defaults to &apos;Any&apos;, options are &apos;Any&apos;, &apos;Beneficial&apos;, &apos;Harmful&apos; or &apos;Neutral&apos;.
        /// </summary>
        public static string TARGETEXISTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TARGETEXISTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if TargetExists(&quot;Harmful&quot;):.
        /// </summary>
        public static string TARGETEXISTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TARGETEXISTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Target the specified type on the ground, optional parameters for hue and distance..
        /// </summary>
        public static string TARGETGROUND_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TARGETGROUND_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a TargetGround(0x190, -1, 10).
        /// </summary>
        public static string TARGETGROUND_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TARGETGROUND_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Targets the tile at the given offsets relative to the player.
        /// </summary>
        public static string TARGETTILEOFFSET_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TARGETTILEOFFSET_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a #Targets the tile at the current Y coordinate + 1
        ///TargetTileOffset(0, 1, 0).
        /// </summary>
        public static string TARGETTILEOFFSET_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("TARGETTILEOFFSET_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a TargetTileOffset(0, 1, 0).
        /// </summary>
        public static string TARGETTILEOFFSET_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TARGETTILEOFFSET_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Targets the tile at the given offsets relative to the player (automatically targeting trees/cave tiles/water if present).
        /// </summary>
        public static string TARGETTILEOFFSETRESOURCE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TARGETTILEOFFSETRESOURCE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a TargetTileOffsetResource(0, -1, 0).
        /// </summary>
        public static string TARGETTILEOFFSETRESOURCE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TARGETTILEOFFSETRESOURCE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Target tile the given distance relative to the specified alias/serial, optional boolean for reverse mode..
        /// </summary>
        public static string TARGETTILERELATIVE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TARGETTILERELATIVE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a TargetTileRelative(&quot;self&quot;, 1, False).
        /// </summary>
        public static string TARGETTILERELATIVE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TARGETTILERELATIVE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Target specified type in player backpack, optional parameters for hue and search level..
        /// </summary>
        public static string TARGETTYPE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TARGETTYPE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a TargetType(0xff, 0, 3).
        /// </summary>
        public static string TARGETTYPE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TARGETTYPE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Targets the ground at the given coordinates..
        /// </summary>
        public static string TARGETXYZ_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TARGETXYZ_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a TargetXYZ(1000, 1000, 0).
        /// </summary>
        public static string TARGETXYZ_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TARGETXYZ_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Check for a named timer value..
        /// </summary>
        public static string TIMER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TIMER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Timer(&quot;shmoo&quot;) &gt; 10000:.
        /// </summary>
        public static string TIMER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TIMER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the timer exists..
        /// </summary>
        public static string TIMEREXISTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TIMEREXISTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if TimerExists(&quot;shmoo&quot;):.
        /// </summary>
        public static string TIMEREXISTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TIMEREXISTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Outputs the elapsed timer value as a SystemMessage.
        /// </summary>
        public static string TIMERMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TIMERMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a TimerMsg(&quot;shmoo&quot;).
        /// </summary>
        public static string TIMERMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TIMERMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the current players&apos; tithing points..
        /// </summary>
        public static string TITHINGPOINTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TITHINGPOINTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if TithingPoints() &lt; 1000:.
        /// </summary>
        public static string TITHINGPOINTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TITHINGPOINTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Toggle Force Walk.
        /// </summary>
        public static string TOGGLEFORCEWALK_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TOGGLEFORCEWALK_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ToggleForceWalk().
        /// </summary>
        public static string TOGGLEFORCEWALK_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TOGGLEFORCEWALK_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Unmounts if mounted, or mounts if unmounted, will prompt for mount if no &quot;mount&quot; alias..
        /// </summary>
        public static string TOGGLEMOUNTED_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TOGGLEMOUNTED_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a ToggleMounted().
        /// </summary>
        public static string TOGGLEMOUNTED_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TOGGLEMOUNTED_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Turn in the given direction..
        /// </summary>
        public static string TURN_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("TURN_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Turn(&quot;east&quot;).
        /// </summary>
        public static string TURN_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("TURN_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Undress all items in the specified dress agent..
        /// </summary>
        public static string UNDRESS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("UNDRESS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Undress(&quot;Dress-1&quot;).
        /// </summary>
        public static string UNDRESS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("UNDRESS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Removes the alias name given..
        /// </summary>
        public static string UNSETALIAS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("UNSETALIAS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a UnsetAlias(&quot;mount&quot;).
        /// </summary>
        public static string UNSETALIAS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("UNSETALIAS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Uses object in the specified layer, optional parameter for mobile.
        /// </summary>
        public static string USELAYER_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("USELAYER_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a UseLayer(&quot;Talisman&quot;).
        /// </summary>
        public static string USELAYER_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("USELAYER_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends use (doubleclick) request for given object (parameter can be serial or alias)..
        /// </summary>
        public static string USEOBJECT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("USEOBJECT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a UseObject(&quot;mount&quot;).
        /// </summary>
        public static string USEOBJECT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("USEOBJECT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Use a specific item type (graphic) from your backpack, only once.
        /// </summary>
        public static string USEONCE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("USEONCE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a UseOnce(0xff).
        /// </summary>
        public static string USEONCE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("USEONCE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Invokes the given skill name..
        /// </summary>
        public static string USESKILL_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("USESKILL_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a UseSkill(&quot;Hiding&quot;).
        /// </summary>
        public static string USESKILL_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("USESKILL_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Uses specified item and targets target in one action. Requires server support (OSI / ServUO).
        /// </summary>
        public static string USETARGETEDITEM_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("USETARGETEDITEM_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a UseTargetedItem(&apos;bandage&apos;, &apos;pet&apos;).
        /// </summary>
        public static string USETARGETEDITEM_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("USETARGETEDITEM_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sends use (doubleclick) request for given type, optional parameters of hue and container object (defaults to player backpack) (parameters can be serial or alias)..
        /// </summary>
        public static string USETYPE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("USETYPE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a UseType(0xff).
        /// </summary>
        public static string USETYPE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("USETYPE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Wait for container contents for given container..
        /// </summary>
        public static string WAITFORCONTENTS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITFORCONTENTS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WaitForContents(&quot;backpack&quot;, 5000).
        /// </summary>
        public static string WAITFORCONTENTS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITFORCONTENTS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Request or wait for a context menu option..
        /// </summary>
        public static string WAITFORCONTEXT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITFORCONTEXT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a # select by index number
        ///WaitForContext(&apos;self&apos;, 2, 5000)
        ///# select by entry name
        ///WaitForContext(&apos;self&apos;, &quot;Open Item Insurance Menu&quot;, 5000).
        /// </summary>
        public static string WAITFORCONTEXT_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("WAITFORCONTEXT_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WaitForContext(0x00aabbcc, 1, 5000).
        /// </summary>
        public static string WAITFORCONTEXT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITFORCONTEXT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Pauses until incoming gump packet is received, optional paramters of gump ID and timeout.
        /// </summary>
        public static string WAITFORGUMP_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITFORGUMP_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WaitForGump(0xff, 5000).
        /// </summary>
        public static string WAITFORGUMP_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITFORGUMP_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Wait the given timeout for the journal text to appear..
        /// </summary>
        public static string WAITFORJOURNAL_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITFORJOURNAL_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if WaitForJournal(&quot;town guards&quot;, 5000, &quot;system&quot;):.
        /// </summary>
        public static string WAITFORJOURNAL_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITFORJOURNAL_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Pauses until incoming menu packet is received, optional paramters of gump ID and timeout.
        /// </summary>
        public static string WAITFORMENU_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITFORMENU_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a UseSkill(&apos;Tracking&apos;)
        ///WaitForMenu(0x1d0, 5000)
        ///ReplyMenu(0x1d0, 3, 0x2106, 0)
        ///WaitForMenu(0x1d1, 5000).
        /// </summary>
        public static string WAITFORMENU_COMMAND_EXAMPLE {
            get {
                return ResourceManager.GetString("WAITFORMENU_COMMAND_EXAMPLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WaitForMenu(0x1d0, 5000).
        /// </summary>
        public static string WAITFORMENU_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITFORMENU_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Wait the specified timeout for a prompt packet to be received.
        /// </summary>
        public static string WAITFORPROMPT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITFORPROMPT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WaitForPrompt(5000).
        /// </summary>
        public static string WAITFORPROMPT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITFORPROMPT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Wait for item properties to be received for specified item..
        /// </summary>
        public static string WAITFORPROPERTIES_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITFORPROPERTIES_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WaitForProperties(&quot;backpack&quot;, 5000).
        /// </summary>
        public static string WAITFORPROPERTIES_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITFORPROPERTIES_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Wait for target packet from server, optional timeout parameter (default 5000 milliseconds)..
        /// </summary>
        public static string WAITFORTARGET_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITFORTARGET_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WaitForTarget(5000).
        /// </summary>
        public static string WAITFORTARGET_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITFORTARGET_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Waits the specified timeout for target cursor whilst returning false if the spell is fizzled / uncastable beforehand..
        /// </summary>
        public static string WAITFORTARGETORFIZZLE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITFORTARGETORFIZZLE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WaitForTargetOrFizzle(5000).
        /// </summary>
        public static string WAITFORTARGETORFIZZLE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITFORTARGETORFIZZLE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true whenever the core is internally waiting for a server target.
        /// </summary>
        public static string WAITINGFORTARGET_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAITINGFORTARGET_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if WaitingForTarget():.
        /// </summary>
        public static string WAITINGFORTARGET_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAITINGFORTARGET_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Walk in the given direction..
        /// </summary>
        public static string WALK_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WALK_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Walk(&quot;east&quot;).
        /// </summary>
        public static string WALK_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WALK_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Checks whether a mobile is in war mode..
        /// </summary>
        public static string WAR_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WAR_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if War(&quot;self&quot;):.
        /// </summary>
        public static string WAR_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WAR_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Sets war mode status, parameter on, off, or toggle, defaults to toggle if no parameter given..
        /// </summary>
        public static string WARMODE_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WARMODE_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WarMode(&quot;on&quot;).
        /// </summary>
        public static string WARMODE_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WARMODE_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns the current weight as as per status bar data..
        /// </summary>
        public static string WEIGHT_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WEIGHT_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if Weight() &gt; 300:.
        /// </summary>
        public static string WEIGHT_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WEIGHT_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Whispers the given message.
        /// </summary>
        public static string WHISPERMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("WHISPERMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a WhisperMsg(&quot;hi&quot;).
        /// </summary>
        public static string WHISPERMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("WHISPERMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns X coordinate of given object (parameter can be serial or alias)..
        /// </summary>
        public static string X_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("X_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a x = X(&quot;self&quot;).
        /// </summary>
        public static string X_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("X_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns Y coordinate of given object (parameter can be serial or alias)..
        /// </summary>
        public static string Y_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("Y_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a y = Y(&quot;self&quot;).
        /// </summary>
        public static string Y_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("Y_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Yells the given message.
        /// </summary>
        public static string YELLMSG_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("YELLMSG_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a YellMsg(&quot;hi&quot;).
        /// </summary>
        public static string YELLMSG_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("YELLMSG_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns true if the specified mobile is yellowhits..
        /// </summary>
        public static string YELLOWHITS_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("YELLOWHITS_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a if YellowHits(&quot;self&quot;):.
        /// </summary>
        public static string YELLOWHITS_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("YELLOWHITS_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Returns Z coordinate of given object (parameter can be serial or alias)..
        /// </summary>
        public static string Z_COMMAND_DESCRIPTION {
            get {
                return ResourceManager.GetString("Z_COMMAND_DESCRIPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a y = Y(&quot;self&quot;).
        /// </summary>
        public static string Z_COMMAND_INSERTTEXT {
            get {
                return ResourceManager.GetString("Z_COMMAND_INSERTTEXT", resourceCulture);
            }
        }
    }
}
