<Window x:Class="ClassicAssist.UI.Views.General.AutologinConfigureWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:resources="clr-namespace:ClassicAssist.Shared.Resources;assembly=ClassicAssist.Shared"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:behaviours="clr-namespace:ClassicAssist.Shared.UI.Behaviours;assembly=ClassicAssist.Shared"
        xmlns:general="clr-namespace:ClassicAssist.UI.Views.General"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        mc:Ignorable="d"
        Title="{x:Static resources:Strings.Autologin}" Width="300" SizeToContent="Height"
        Background="{DynamicResource WindowBackgroundBrush}" Topmost="True"
        DataContext="{Binding Mode=OneWay, RelativeSource={RelativeSource Self}}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../../../Resources/DarkTheme.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.Resources>
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                    <Setter Property="Margin" Value="0,0,10,5" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
                <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                    <Setter Property="Margin" Value="0,0,0,5" />
                </Style>
                <Style TargetType="{x:Type xctk:IntegerUpDown}" BasedOn="{StaticResource {x:Type xctk:IntegerUpDown}}">
                    <Setter Property="Margin" Value="0,0,0,5" />
                    <Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}" />
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForegroundBrush}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderBrush}" />
                </Style>
                <Style TargetType="{x:Type xctk:TimeSpanUpDown}"
                       BasedOn="{StaticResource {x:Type xctk:TimeSpanUpDown}}">
                    <Setter Property="Margin" Value="0,0,0,5" />
                    <Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}" />
                    <Setter Property="Foreground" Value="{DynamicResource ThemeForegroundBrush}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource ThemeBorderBrush}" />
                </Style>
            </Grid.Resources>
            <TextBlock Grid.Row="0" Grid.Column="0" Text="{x:Static resources:Strings.Account}" />
            <ComboBox x:Name="comboBox" Grid.Row="0" Grid.Column="1" ItemsSource="{Binding Accounts}">
                <ComboBox.SelectedItem>
                    <Binding Path="Account" ValidatesOnNotifyDataErrors="True"
                             NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <general:ComboValidationRule />
                        </Binding.ValidationRules>
                    </Binding>
                </ComboBox.SelectedItem>
            </ComboBox>
            <TextBlock Grid.Row="1" Grid.Column="0" Text="{x:Static resources:Strings.Server_Index}" />
            <xctk:IntegerUpDown Grid.Row="1" Grid.Column="1" Text="{Binding ServerIndex}" />
            <TextBlock Grid.Row="2" Grid.Column="0" Text="{x:Static resources:Strings.Character_Index}" />
            <xctk:IntegerUpDown Grid.Row="2" Grid.Column="1" Text="{Binding CharacterIndex}" />
            <TextBlock Grid.Row="3" Grid.Column="0" Text="{x:Static resources:Strings.Connect_Delay}" />
            <xctk:TimeSpanUpDown Grid.Row="3" Grid.Column="1" Text="{Binding ConnectDelay}" />
            <TextBlock Grid.Row="4" Grid.Column="0" Text="{x:Static resources:Strings.Reconnect_Delay}" />
            <xctk:TimeSpanUpDown Grid.Row="4" Grid.Column="1" Text="{Binding ReconnectDelay}" />
        </Grid>
        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <StackPanel.Resources>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Padding" Value="25,5" />
                    <Setter Property="Margin" Value="5,0,0,0" />
                </Style>
            </StackPanel.Resources>
            <Button Content="{x:Static resources:Strings.OK}" Command="{Binding OkCommand}">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="IsEnabled" Value="False" />
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition
                                        Binding="{Binding Path=(Validation.HasError),ElementName=comboBox, Mode=OneWay}"
                                        Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True" />
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
                <i:Interaction.Behaviors>
                    <behaviours:CloseOnClickBehaviour />
                </i:Interaction.Behaviors>
            </Button>
            <Button Content="{x:Static resources:Strings.Cancel}">
                <i:Interaction.Behaviors>
                    <behaviours:CloseOnClickBehaviour />
                </i:Interaction.Behaviors>
            </Button>
        </StackPanel>
    </Grid>
</Window>