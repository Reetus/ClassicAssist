<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Example" xml:space="preserve">
    <value>Example</value>
  </data>
  <data name="Method Signature" xml:space="preserve">
    <value>Method Signature</value>
  </data>
  <data name="TRANSLATE_CREDIT" xml:space="preserve">
    <value />
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="Generated on" xml:space="preserve">
    <value>Generated on</value>
  </data>
  <data name="ClassicAssist Macro Commands" xml:space="preserve">
    <value>ClassicAssist Macro Commands</value>
  </data>
  <data name="Optional" xml:space="preserve">
    <value>Optional</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_ABILITY" xml:space="preserve">
    <value>The name of the ability, "primary", "secondary", "stun" or "disarm"</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_AMOUNT" xml:space="preserve">
    <value>Integer representing an amount, ie 10</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_CONTEXTMENUINDEX" xml:space="preserve">
    <value>Context menu entry index number</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_HUE" xml:space="preserve">
    <value>Item Hue or -1 for any</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_ITEMID" xml:space="preserve">
    <value>ItemID / Graphic such as  0x3db</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_LAYER" xml:space="preserve">
    <value>String representing a layer, such as "OneHanded" or "Talisman" etc</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_LEFTRIGHTBOTH" xml:space="preserve">
    <value>Hand - "left", "right", or "both"</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_NAME" xml:space="preserve">
    <value>String representing a name, ie "Snoopy"</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_ONOFF" xml:space="preserve">
    <value>"on" or "off"</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_SERIALORALIAS" xml:space="preserve">
    <value>An entity serial in integer or hex format, or an alias string such as "self"</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_SHOWTYPE" xml:space="preserve">
    <value>Show type - "mobiles" or "corpses"</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_TIMEOUT" xml:space="preserve">
    <value>Timeout specified in milliseconds</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_AGENTENTRYNAME" xml:space="preserve">
    <value>Agent entry name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_ALIASNAME" xml:space="preserve">
    <value>Alias name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_BENEFICIALHARMFULNEUTRAL" xml:space="preserve">
    <value>Target type - "harmful", "beneficial", or "neutral"</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_BUFFNAME" xml:space="preserve">
    <value>Buff name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_DIRECTION" xml:space="preserve">
    <value>Direction, ie "West"</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_DISTANCE" xml:space="preserve">
    <value>Distance</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_GUMPBUTTONINDEX" xml:space="preserve">
    <value>Gump button ID</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_INTEGERVALUE" xml:space="preserve">
    <value>Integer value - See description for usage</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_LISTNAME" xml:space="preserve">
    <value>List name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_MACRONAME" xml:space="preserve">
    <value>Macro name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_RANGE" xml:space="preserve">
    <value>Range, ie 10</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_SERIAL" xml:space="preserve">
    <value>An entity serial such as 0xf00ff00f</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_SKILLNAME" xml:space="preserve">
    <value>Skill name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_SPECIALMOVENAME" xml:space="preserve">
    <value>Special move name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_SPELLNAME" xml:space="preserve">
    <value>Spell name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_STRING" xml:space="preserve">
    <value>String value - See description for usage</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_TIMERNAME" xml:space="preserve">
    <value>Timer name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_UNKNOWN" xml:space="preserve">
    <value>Not specified - See description for usage</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_UPDOWNLOCKED" xml:space="preserve">
    <value>Lock Status - "up", "down", or "locked"</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_WANDNAME" xml:space="preserve">
    <value>Wand name</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_XCOORDINATE" xml:space="preserve">
    <value>X Coordinate</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_XCOORDINATEOFFSET" xml:space="preserve">
    <value>X Coordinate offset</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_YCOORDINATE" xml:space="preserve">
    <value>Y Coordinate</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_YCOORDINATEOFFSET" xml:space="preserve">
    <value>Y Coordinate offset</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_ZCOORDINATE" xml:space="preserve">
    <value>Z Coordinate</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_ZCOORDINATEOFFSET" xml:space="preserve">
    <value>Z Coordinate offset</value>
  </data>
  <data name="See Also: {0}" xml:space="preserve">
    <value>See Also: {0}</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_EMPTY" xml:space="preserve">
    <value> </value>
  </data>
  <data name="Types" xml:space="preserve">
    <value>Types</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_BOOLEAN" xml:space="preserve">
    <value>True/False value, see description for usage</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_ELEMENTVALUEFRONTBACK" xml:space="preserve">
    <value>Element value to remove from list, or 'front' to remove the first item, or 'back' to remove last entry, default 'back'</value>
  </data>
  <data name="PARAMETER_DESCRIPTION_STRINGARRAY" xml:space="preserve">
    <value>An array of strings</value>
  </data>
</root>